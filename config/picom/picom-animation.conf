# This picom configuration mainly from gh0stzk at https://github.com/gh0stzk/dotfiles/blob/master/config/bspwm/src/config/picom-animations.conf

rules = (
  # Picom Configuration for Normal Window Animations
  {
    # Match this animation to normal windows
    match = "window_type = 'normal'";
  
    # Animations block: Defines a series of animations for normal windows
    animations = (
  
      # Close animation (when the window is closed)
      {
        triggers = ["close"];  # Triggered when the window closes
  
        # Opacity settings: Window fades out
        opacity = {
          curve = "cubic-bezier(0,1,1,1)";  # Smooth fade-out curve
          duration = 0.3;  # Fade-out duration (0.3 seconds)
          start = "window-raw-opacity-before";  # Starting opacity before closing
          end = 0;  # Fully transparent when the window closes
        };
  
        # Apply blur to opacity and shadow opacity
        blur-opacity = "opacity";  # Blur effect follows the opacity
        shadow-opacity = "opacity";  # Shadow opacity follows the window opacity
  
        # Scale animation for window size: Shrinks the window when closing
        scale-x = {
          curve = "cubic-bezier(0,1.3,1,1)";  # Smooth scale-down curve
          duration = 0.3;  # Duration of the scale-down effect (0.3 seconds)
          start = 1;  # Start with full size
          end = 0.6;  # End scaled down to 60% of the original size
        };
  
        # Vertical scaling mirrors the horizontal scaling
        scale-y = "scale-x";  # Uses the same value as scale-x for vertical scaling
  
        # Offset the window's position to keep it centered during scaling
        offset-x = "(1 - scale-x) / 2 * window-width";  # Horizontal offset
        offset-y = "(1 - scale-y) / 2 * window-height";  # Vertical offset
  
        # Adjust shadow's scale and position to match window's transformations
        shadow-scale-x = "scale-x";
        shadow-scale-y = "scale-y";
        shadow-offset-x = "offset-x";
        shadow-offset-y = "offset-y";
      },
  
      # Open animation (when the window is opened)
      {
        triggers = ["open"];  # Triggered when the window opens
  
        # Opacity settings: Window fades in
        opacity = {
          curve = "cubic-bezier(0,1,1,1)";  # Smooth fade-in curve
          duration = 0.5;  # Fade-in duration (0.5 seconds)
          start = 0;  # Start fully transparent
          end = "window-raw-opacity";  # End at full opacity (raw opacity)
        };
  
        # Apply blur to opacity and shadow opacity
        blur-opacity = "opacity";  # Blur effect follows the opacity
        shadow-opacity = "opacity";  # Shadow opacity follows the window opacity
  
        # Scale animation for window size: Window grows as it opens
        scale-x = {
          curve = "cubic-bezier(0,1.3,1,1)";  # Smooth scale-up curve
          duration = 0.5;  # Duration of the scale-up effect (0.5 seconds)
          start = 0.6;  # Start smaller than full size
          end = 1;  # End at full size
        };
  
        # Vertical scaling mirrors the horizontal scaling
        scale-y = "scale-x";  # Uses the same value as scale-x for vertical scaling
  
        # Offset the window's position to keep it centered during scaling
        offset-x = "(1 - scale-x) / 2 * window-width";  # Horizontal offset
        offset-y = "(1 - scale-y) / 2 * window-height";  # Vertical offset
  
        # Adjust shadow's scale and position to match window's transformations
        shadow-scale-x = "scale-x";
        shadow-scale-y = "scale-y";
        shadow-offset-x = "offset-x";
        shadow-offset-y = "offset-y";
      },
  
      # Geometry animation (for resizing or moving windows)
      {
        triggers = ["geometry"];  # Triggered when the window changes size or position
  
        # Window grows in size (opened, resized, or moved)
        scale-x = {
          curve = "cubic-bezier(0,0,0,1.28)";  # Smooth growth curve
          duration = 0.5;  # Duration of the size increase (0.5 seconds)
          start = "window-width-before / window-width";  # Starts based on previous window size
          end = 1;  # The window grows to full size
        };
  
        # Window shrinks in size (closed, resized, or moved)
        scale-x-reverse = {
          curve = "cubic-bezier(0,0,0,1.28)";  # Smooth shrink curve
          duration = 0.3;  # Duration of the size decrease (0.3 seconds)
          start = "window-width / window-width-before";  # Starts based on previous window size
          end = 1;  # The window shrinks back to its original size
        };
  
        # Vertical scaling for resizing
        scale-y = {
          curve = "cubic-bezier(0,0,0,1.28)";  # Smooth vertical growth curve
          duration = 0.5;  # Duration of the size increase (0.5 seconds)
          start = "window-height-before / window-height";  # Starts based on previous window height
          end = 1;  # The window grows to full height
        };
  
        # Reverse vertical scaling (shrinking)
        scale-y-reverse = {
          curve = "cubic-bezier(0,0,0,1.28)";  # Smooth vertical shrink curve
          duration = 0.3;  # Duration of the size decrease (0.3 seconds)
          start = "window-height / window-height-before";  # Starts based on previous window height
          end = 1;  # The window shrinks back to its original height
        };
  
        # Horizontal offset while resizing
        offset-x = {
          curve = "cubic-bezier(0,0,0,1.28)";  # Smooth horizontal transition
          duration = 0.5;  # Duration of the horizontal move (0.5 seconds)
          start = "window-x-before - window-x";  # Starts based on previous window position
          end = 0;  # Moves back to its original horizontal position
        };
  
        # Vertical offset while resizing
        offset-y = {
          curve = "cubic-bezier(0,0,0,1.28)";  # Smooth vertical transition
          duration = 0.5;  # Duration of the vertical move (0.5 seconds)
          start = "window-y-before - window-y";  # Starts based on previous window position
          end = 0;  # Moves back to its original vertical position
        };
  
        # Adjust the shadow's scale and position during resizing
        shadow-scale-x = "scale-x";
        shadow-scale-y = "scale-y";
        shadow-offset-x = "offset-x";
        shadow-offset-y = "offset-y";
      }
    )
  },

  # Animations for Rofi launchers.
	{
		match = "class_g = 'Rofi'";
		animations = (
		  {
		  	triggers = ["close", "hide"];
		  	preset = "disappear";
		  	duration = 0.05;
		  	scale = 0.5;
		  },
		  {
		  	triggers = ["open", "show"];
		  	preset = "appear";
		  	duration = 0.2;
		  	scale = 0.5;
		  }
		)
	},

  # Exclude corner from these match
  {
    match = "class_g *= 'awesome'";

    corner-radius = 0;
  },

  # Exclude blur from these match
  {
    match = "window_type = 'desktop' ||"
	          "window_type = 'utility' ||"
	          "window_type = 'notification' ||"
	          "class_g = 'slop' ||"
	          "class_g = 'Firefox' ||"
	          "name = 'Rofi' ||"
	          "_GTK_FRAME_EXTENTS";

    blur-strength = 0;
  },

  # Exclue shadow from these match
  {
    match = "name = 'Notification' ||"
    	      "class_g = 'Conky' ||"
    	      "class_g ?= 'Notify-osd' ||"
    	      "class_g = 'Cairo-clock' ||"
    	      "class_g = 'slop' ||"
    	      "class_g = 'Firefox' ||"
    	      "class_g = 'Rofi' ||"
    	      "_GTK_FRAME_EXTENTS ||"
    	      "_NET_WM_STATE *= '_NET_WM_STATE_HIDDEN'";
    
    shadow-radius = 0;
  },

  {
    match = "window_type = 'normal' ||"
            "window_type = 'dialog' ||"
            "window_type = 'popup_menu' ||"
            "window_type = 'notification' ||"
            "window_type = 'dock'";

    frame-opacity = 0.99;
  },

  { match = "window_type = 'tooltip'"; fade = true; shadow = false; focus = false; },
  { match = "window_type = 'normal'"; shadow = false; },
  { match = "window_type = 'dock'"; shadow = false; },
  { match = "window_type = 'dnd'"; shadow = false; },
  { match = "window_type = 'popup_menu'"; shadow = true; focus = false; opacity = 0.9; },
  { match = "window_type = 'dropdown_menu'"; shadow = false; focus = false; },
  { match = "window_type = 'above'"; shadow = true; },
  { match = "window_type = 'splash'"; shadow = false; },
  { match = "window_type = 'utility'"; shadow = false; focus = false; blur-background = false; },
  { match = "window_type = 'notification'"; shadow = false; },
  { match = "window_type = 'desktop'"; shadow = false; blur-background = false; },
  { match = "window_type = 'menu'"; focus = false; },
  { match = "window_type = 'dialog'"; shadow = true; }
)
